[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "extract_video_url",
        "kind": 2,
        "importPath": "downloader",
        "description": "downloader",
        "peekOfCode": "def extract_video_url(logs):\n    \"\"\"\n    Extracts the direct video URL from network logs.\n    Looks for URLs containing .m3u8 or .mp4.\n    \"\"\"\n    for log in logs:\n        try:\n            message = json.loads(log['message'])\n            url = message.get('message', {}).get('params', {}).get('request', {}).get('url', '')\n            if url and ('.m3u8' in url or '.mp4' in url):",
        "detail": "downloader",
        "documentation": {}
    },
    {
        "label": "download_video",
        "kind": 2,
        "importPath": "downloader",
        "description": "downloader",
        "peekOfCode": "def download_video(video_url, output_file):\n    \"\"\"\n    Downloads the video using ffmpeg.\n    \"\"\"\n    print(f\"Downloading video from: {video_url}\")\n    command = f'ffmpeg -i \"{video_url}\" -c copy \"{output_file}\"'\n    subprocess.run(command, shell=True, check=True)\n    print(f\"Download completed. File saved as {output_file}\")\ndef main(video_page_url):\n    # Configure the browser to capture network logs",
        "detail": "downloader",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "downloader",
        "description": "downloader",
        "peekOfCode": "def main(video_page_url):\n    # Configure the browser to capture network logs\n    chrome_options = Options()\n    chrome_options.add_argument('--headless')  # Runs Chrome in headless mode\n    chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL'})\n    # Update with the correct chromedriver path\n    service = Service('C:\\\\path\\\\to\\\\chromedriver.exe')\n    driver = webdriver.Chrome(service=service, options=chrome_options)\n    try:\n        # Navigate to the video page",
        "detail": "downloader",
        "documentation": {}
    },
    {
        "label": "start_download",
        "kind": 2,
        "importPath": "downloader",
        "description": "downloader",
        "peekOfCode": "def start_download():\n    video_page_url = url_entry.get()\n    if not video_page_url:\n        messagebox.showerror(\"Error\", \"Please enter the video URL.\")\n        return\n    # Run main in a separate thread to avoid UI freeze\n    threading.Thread(target=main, args=(video_page_url,), daemon=True).start()\n# Configuration of the GUI\nroot = tk.Tk()\nroot.title(\"Weverse Video Downloader\")",
        "detail": "downloader",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "downloader",
        "description": "downloader",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"Weverse Video Downloader\")\nroot.geometry(\"500x300\")  # Set the size of the window\nroot.config(bg=\"#f0f0f0\")  # Set a light background color\n# Create a frame for better organization\nframe = tk.Frame(root, bg=\"#f0f0f0\")\nframe.pack(pady=20)\n# Add title label with styling\ntitle_label = tk.Label(frame, text=\"Weverse Video Downloader\", font=(\"Helvetica\", 16, \"bold\"), fg=\"#333\")\ntitle_label.grid(row=0, column=0, columnspan=2, pady=10)",
        "detail": "downloader",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": "downloader",
        "description": "downloader",
        "peekOfCode": "frame = tk.Frame(root, bg=\"#f0f0f0\")\nframe.pack(pady=20)\n# Add title label with styling\ntitle_label = tk.Label(frame, text=\"Weverse Video Downloader\", font=(\"Helvetica\", 16, \"bold\"), fg=\"#333\")\ntitle_label.grid(row=0, column=0, columnspan=2, pady=10)\n# Label and entry for the URL\nurl_label = tk.Label(frame, text=\"Video URL:\", font=(\"Helvetica\", 12), bg=\"#f0f0f0\")\nurl_label.grid(row=1, column=0, padx=10, pady=10, sticky=\"e\")\nurl_entry = tk.Entry(frame, width=40, font=(\"Helvetica\", 12), borderwidth=2, relief=\"solid\")\nurl_entry.grid(row=1, column=1, padx=10, pady=10)",
        "detail": "downloader",
        "documentation": {}
    },
    {
        "label": "title_label",
        "kind": 5,
        "importPath": "downloader",
        "description": "downloader",
        "peekOfCode": "title_label = tk.Label(frame, text=\"Weverse Video Downloader\", font=(\"Helvetica\", 16, \"bold\"), fg=\"#333\")\ntitle_label.grid(row=0, column=0, columnspan=2, pady=10)\n# Label and entry for the URL\nurl_label = tk.Label(frame, text=\"Video URL:\", font=(\"Helvetica\", 12), bg=\"#f0f0f0\")\nurl_label.grid(row=1, column=0, padx=10, pady=10, sticky=\"e\")\nurl_entry = tk.Entry(frame, width=40, font=(\"Helvetica\", 12), borderwidth=2, relief=\"solid\")\nurl_entry.grid(row=1, column=1, padx=10, pady=10)\n# Button to start download\ndownload_button = tk.Button(frame, text=\"Download Video\", command=start_download, font=(\"Helvetica\", 12), bg=\"#4CAF50\", fg=\"white\", relief=\"flat\", width=20)\ndownload_button.grid(row=2, column=0, columnspan=2, pady=20)",
        "detail": "downloader",
        "documentation": {}
    },
    {
        "label": "url_label",
        "kind": 5,
        "importPath": "downloader",
        "description": "downloader",
        "peekOfCode": "url_label = tk.Label(frame, text=\"Video URL:\", font=(\"Helvetica\", 12), bg=\"#f0f0f0\")\nurl_label.grid(row=1, column=0, padx=10, pady=10, sticky=\"e\")\nurl_entry = tk.Entry(frame, width=40, font=(\"Helvetica\", 12), borderwidth=2, relief=\"solid\")\nurl_entry.grid(row=1, column=1, padx=10, pady=10)\n# Button to start download\ndownload_button = tk.Button(frame, text=\"Download Video\", command=start_download, font=(\"Helvetica\", 12), bg=\"#4CAF50\", fg=\"white\", relief=\"flat\", width=20)\ndownload_button.grid(row=2, column=0, columnspan=2, pady=20)\n# Add padding for the overall window\nroot.grid_rowconfigure(0, weight=1)\nroot.grid_rowconfigure(1, weight=1)",
        "detail": "downloader",
        "documentation": {}
    },
    {
        "label": "url_entry",
        "kind": 5,
        "importPath": "downloader",
        "description": "downloader",
        "peekOfCode": "url_entry = tk.Entry(frame, width=40, font=(\"Helvetica\", 12), borderwidth=2, relief=\"solid\")\nurl_entry.grid(row=1, column=1, padx=10, pady=10)\n# Button to start download\ndownload_button = tk.Button(frame, text=\"Download Video\", command=start_download, font=(\"Helvetica\", 12), bg=\"#4CAF50\", fg=\"white\", relief=\"flat\", width=20)\ndownload_button.grid(row=2, column=0, columnspan=2, pady=20)\n# Add padding for the overall window\nroot.grid_rowconfigure(0, weight=1)\nroot.grid_rowconfigure(1, weight=1)\nroot.mainloop()",
        "detail": "downloader",
        "documentation": {}
    },
    {
        "label": "download_button",
        "kind": 5,
        "importPath": "downloader",
        "description": "downloader",
        "peekOfCode": "download_button = tk.Button(frame, text=\"Download Video\", command=start_download, font=(\"Helvetica\", 12), bg=\"#4CAF50\", fg=\"white\", relief=\"flat\", width=20)\ndownload_button.grid(row=2, column=0, columnspan=2, pady=20)\n# Add padding for the overall window\nroot.grid_rowconfigure(0, weight=1)\nroot.grid_rowconfigure(1, weight=1)\nroot.mainloop()",
        "detail": "downloader",
        "documentation": {}
    }
]